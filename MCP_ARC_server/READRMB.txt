
deactivate  ## just to start fresh when building the server

mkdir testserver
cd testserver
uv init --name arc_server
rm -rf .git*
uv sync
source .venv/bin/activate
uv add 'mcp[cli]'

# now we are ready to test the with mcp inspector
uv run mcp dev arc_server.py

# uv add anthropic (for client)
python3 arc_client.py   # will cause server to run; no need to start separate
    # this requires that you have done the source .venv above
uv run arc_client.py   # will cause server to run; no need to start separate
    # this does NOT require that you have done the source .venv above

The client currently uses sonnet-3.7 as the LLM but because we retrieve the prompt
data as a str, we could really use any LLM, perhaps via litellm.

----

MCP_python_sdk.md  is here to provide to agents to help them write code for MCP servers.

----****

NOTE that only server tools can be used by ClaudeDesktop or ClaudeCode.
So, you would need to convert prompts and resources to tools.
In our case, a resource is access to a particular puzzle, so we could
add a tool that does the same thing, OR we could let ClaudeDesktop or ClaudeCode
use their existing file access tools to get the puzzle data.

The promts and resources are only available to clients such as our arc_client.py

----

If you want to use arc_server in Claude Desktop:

  1a. first way to make it accessible to Claude Desktop
    code to add to your  ~/Library/Application Support/Claude/claude_desktop_config.json
    NOTE the command uses "mcp" at the end instead of python; this is important

        "arc_server": {
          "command": "/Users/rbutler/MCPSERVERS/arc_server/.venv/bin/mcp",
          "args": [
            "run",
            "/Users/rbutler/MCPSERVERS/arc_server/arc_server.py"
          ]
        },

  1b. second way to make it accessible to Claude Desktop
    OR IT MAY BE EASIER TO JUST USE THE CMD-LINE IN THIS DIR: #########################

        mcp install arc_server.py --name "ARC Puzzle Server"

    which inserts this into the claude_desktop_config.json file:
        "ARC Puzzle Server": {
          "command": "uv",
          "args": [
            "run",
            "--with",
            "mcp[cli]",
            "mcp",
            "run",
            "/Users/rbutler/MCPSERVERS/arc_server/arc_server.py"
          ]
        }

  2. once you have it available in ClaudeDesktop, you can do use the tool endpoints:
        please list our current available ARC puzzles

----

If you want to add arc_server to ClaudeCode (claude command-line program):

    claude mcp add arc_server -s user -- \
        uv --directory /Users/rbutler/MCPSERVERS/arc_server \
        run arc_server.py \

    # claude mcp remove -s user arc_server  ### to remove it later

    Then in claude, you can also ask it to use the tool to list puzzles:
        /mcp   # just to verify the server is loaded
        get our current list of ARC puzzles  # to request it use the tool
